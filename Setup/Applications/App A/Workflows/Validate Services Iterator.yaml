harnessApiVersion: '1.0'
type: ROLLING
concurrencyStrategy: INFRA
envName: dev
failureStrategies:
- executionScope: WORKFLOW
  failureTypes:
  - APPLICATION_ERROR
  repairActionCode: ROLLBACK_WORKFLOW
  retryCount: 0
notificationRules:
- conditions:
  - FAILED
  executionScope: WORKFLOW
  notificationGroupAsExpression: false
  userGroupAsExpression: false
  userGroupNames:
  - Account Administrator
phases:
- type: KUBERNETES
  computeProviderName: Platform Dev US East 1 01
  daemonSet: false
  infraDefinitionName: mgt-dev-us-east-1-01
  name: Rolling
  phaseSteps:
  - type: K8S_PHASE_STEP
    name: Deploy
    steps:
    - type: SHELL_SCRIPT
      name: Checkout Scripts
      properties:
        commandPath: null
        connectionAttributeName: null
        executeOnDelegate: true
        host: null
        includeInfraSelectors: true
        publishAsVar: false
        sshKeyRefName: null
        sweepingOutputName: null
        sweepingOutputScope: null
        templateExpressions: null
        timeoutMillis: 120000
      templateUri: App/CS - Gabriel - Renamed/Checkout Scripts:latest
      templateVariables:
      - name: scriptBranch
        value: ${workflow.variables.scriptBranch}
      - name: scriptCommit
        value: ${workflow.variables.scriptCommit}
    - type: SHELL_SCRIPT
      name: Validate Services Iterator
      properties:
        commandPath: null
        connectionAttributeName: null
        executeOnDelegate: true
        host: null
        includeInfraSelectors: true
        outputVars: ''
        publishAsVar: true
        scriptString: "#!/bin/bash\n\n#repo_path=\"/opt/harness-delegate/OutSystems-Harness-Scripts\"\
          \n#pip install $repo_path\n\nfilename=\".envvars\"\nif [ -f $filename ];\
          \ then\n   rm $filename \n   echo \"$filename is removed\"\nfi\n\necho executing:\n\
          echo python3  -m harness.validate.validate_services_iterator ${env.name}\
          \ ${secrets.getValue(\"HarnessAccount\")} ${secrets.getValue(\"harness-cli\"\
          )} ${workflow.variables.services_to_validate} --debug\n\n# call the python\
          \ module\npython3  -m harness.validate.validate_services_iterator ${env.name}\
          \ ${secrets.getValue(\"HarnessAccount\")} ${secrets.getValue(\"harness-cli\"\
          )} ${workflow.variables.services_to_validate} --debug \n\necho \"Python\
          \ script executed\"\nexport $(grep -v '^#' $filename | xargs -d '\\n')"
        scriptType: BASH
        sshKeyRefName: null
        sweepingOutputName: validate_services
        sweepingOutputScope: PIPELINE
        templateExpressions: null
        templateVariables: ''
        timeoutMillis: 60000
    stepsInParallel: false
  - type: K8S_PHASE_STEP
    name: Verify
    stepsInParallel: false
  - type: K8S_PHASE_STEP
    name: Wrap Up
    stepsInParallel: false
  provisionNodes: false
  serviceName: GabsMarcoTest
  statefulSet: false
rollbackPhases:
- type: KUBERNETES
  computeProviderName: Platform Dev US East 1 01
  daemonSet: false
  infraDefinitionName: mgt-dev-us-east-1-01
  name: Rollback Rolling
  phaseNameForRollback: Rolling
  phaseSteps:
  - type: K8S_PHASE_STEP
    name: Deploy
    phaseStepNameForRollback: Deploy
    statusForRollback: SUCCESS
    steps:
    - type: K8S_DEPLOYMENT_ROLLING_ROLLBACK
      name: Rollback Deployment
    stepsInParallel: false
  - type: K8S_PHASE_STEP
    name: Wrap Up
    phaseStepNameForRollback: Wrap Up
    stepsInParallel: false
  provisionNodes: false
  serviceName: GabsMarcoTest
  statefulSet: false
templatized: true
userVariables:
- type: TEXT
  fixed: false
  mandatory: false
  name: validate_single_services
  value: 'false'
- type: TEXT
  fixed: false
  mandatory: false
  name: services_to_validate
- type: TEXT
  fixed: false
  mandatory: false
  name: jobs_to_validate
- type: TEXT
  fixed: false
  mandatory: false
  name: scriptBranch
  value: main
- type: TEXT
  fixed: false
  mandatory: false
  name: scriptCommit
