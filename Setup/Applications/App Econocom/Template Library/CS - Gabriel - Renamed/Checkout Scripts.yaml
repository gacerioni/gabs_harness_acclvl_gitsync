harnessApiVersion: '1.0'
type: SHELL_SCRIPT
outputVars: commit
scriptString: "# Fetch scripts\npushd /opt/harness-delegate/OutSystems-Harness-Scripts\n\
  git fetch --verbose --force --tags --prune --prune-tags origin \n\nif [ -z \"${scriptBranch}\"\
  \ ] && [ -z \"${scriptCommit}\" ]; then\n    echo WARNING: No branch or commit specified!\n\
  \    echo Scripts will not be updated\nfi\n# Checkout the branch or the commit \n\
  if [ -z \"${scriptCommit}\" ]; then\n    echo \"Branch to check out: ${scriptBranch}\"\
  \n    commit=$(git rev-parse --verify origin/${scriptBranch})\n    git checkout\
  \ --force $commit\n    git clean -d --force\nelse\n    echo \"Commit to check out:\
  \ ${scriptCommit}\"\n    git checkout --force ${scriptCommit}\n    git clean -d\
  \ --force\nfi\n\ncommit=$(git rev-parse --verify HEAD)\nexport commit\npopd\n\n\
  # set .env file with secrets to fetch from inside of the script\nrm .env\necho cognito_user_name=${secrets.getValue(\"\
  aws-cognito-username\")} >> .env\necho cognito_user_password=${secrets.getValue(\"\
  aws-cognito-pass\")} >> .env\necho current_app_name=${app.name} >> .env\necho deployment_url=${deploymentUrl}\
  \ >> .env\n\necho script_commit=$commit >> .env\n\n# re-install dependencies (OS\
  \ package)\nrepo_path=\"/opt/harness-delegate/OutSystems-Harness-Scripts\"\npip\
  \ install $repo_path"
scriptType: BASH
timeoutMillis: 120000
variables:
- description: Branch of script repo to checkout
  name: scriptBranch
  value: main
- description: Specific commit to checkout
  name: scriptCommit
