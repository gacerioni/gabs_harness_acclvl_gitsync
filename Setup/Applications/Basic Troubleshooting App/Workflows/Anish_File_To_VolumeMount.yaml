harnessApiVersion: '1.0'
type: ROLLING
concurrencyStrategy: INFRA
envName: dev
failureStrategies:
- executionScope: WORKFLOW
  failureTypes:
  - APPLICATION_ERROR
  repairActionCode: ROLLBACK_WORKFLOW
  retryCount: 0
notificationRules:
- conditions:
  - FAILED
  executionScope: WORKFLOW
  notificationGroupAsExpression: false
  userGroupAsExpression: false
  userGroupNames:
  - Account Administrator
phases:
- type: KUBERNETES
  computeProviderName: CS - Gabs - Kubernetes Cluster - GCP
  daemonSet: false
  infraDefinitionName: gcp_k8s_gabs_cluster
  name: Rolling
  phaseSteps:
  - type: K8S_PHASE_STEP
    name: Deploy
    steps:
    - type: SHELL_SCRIPT
      name: Shell Script
      properties:
        commandPath: null
        connectionAttributeName: null
        delegateSelectors:
        - GCP_K8s_Customer_Success
        executeOnDelegate: true
        host: null
        includeInfraSelectors: false
        outputVars: CFGMAPNAME
        publishAsVar: true
        scriptString: |-
          # Safely ensuring that we have the tmp path
          mkdir -p /tmp/filesfroms3

          # Using AWS CLI to fetch my files
          aws s3 cp s3://anish-gabs-labs/integer_file.anyformat /tmp/filesfroms3/integer_file.anyformat

          # Optional overkill chmod
          chmod 777 /tmp/filesfroms3/integer_file.anyformat

          # Creating the dynamic ConfigMap Name:
          epochnow=$(date +%s)
          randomno=$(expr 10000 + $RANDOM % 99999)
          configmapname=anishfile-$epochnow-$randomno

          # Create the configmap
          kubectl -n default create configmap $configmapname --from-file=/tmp/filesfroms3/integer_file.anyformat

          # Deleting the file to prevent conflicts in case you reuse the name
          rm /tmp/filesfroms3/integer_file.anyformat

          # Exporting the configMap name for the other steps
          export CFGMAPNAME=$configmapname
        scriptType: BASH
        secretOutputVars: ''
        sshKeyRefName: null
        sweepingOutputName: helper
        sweepingOutputScope: WORKFLOW
        templateExpressions: null
        templateUuid: null
        templateVariables: null
        templateVersion: null
        timeoutMillis: 60000
    - type: K8S_DEPLOYMENT_ROLLING
      name: Rollout Deployment
      properties:
        delegateSelectors:
        - GCP_K8s_Customer_Success
        stateTimeoutInMinutes: 10
    stepsInParallel: false
  - type: K8S_PHASE_STEP
    name: Verify
    stepsInParallel: false
  - type: K8S_PHASE_STEP
    name: Wrap Up
    stepsInParallel: false
  provisionNodes: false
  serviceName: Anish_File_To_VolumeMount
  statefulSet: false
rollbackPhases:
- type: KUBERNETES
  computeProviderName: CS - Gabs - Kubernetes Cluster - GCP
  daemonSet: false
  infraDefinitionName: gcp_k8s_gabs_cluster
  name: Rollback Rolling
  phaseNameForRollback: Rolling
  phaseSteps:
  - type: K8S_PHASE_STEP
    name: Deploy
    phaseStepNameForRollback: Deploy
    statusForRollback: SUCCESS
    steps:
    - type: K8S_DEPLOYMENT_ROLLING_ROLLBACK
      name: Rollback Deployment
    stepsInParallel: false
  - type: K8S_PHASE_STEP
    name: Wrap Up
    phaseStepNameForRollback: Wrap Up
    stepsInParallel: false
  provisionNodes: false
  serviceName: Anish_File_To_VolumeMount
  statefulSet: false
templatized: false
