harnessApiVersion: '1.0'
type: SHELL_SCRIPT
scriptString: "#!/bin/bash\n\nurl=\"https://app.harness.io/gateway/api/graphql?accountId=${app.accountId}\"\
  \nauth_header=\"x-api-key: ${secrets.getValue(\"gabs-kms-api-key\")}\"\ncontent_header=\"\
  Content-Type: application/json\"\npipeline_id=\"${input_pipeline_id}\"\napplication_id=$(echo\
  \ \"${deploymentUrl}\" | sed -rn 's/.*\\/app\\/(.+)\\/pipeline-execution\\/.*/\\\
  1/p')\ncurrent_pipeline_artifact_version=\"${artifact.buildNo}\"\n\nfunction getOlderApprovalPendingExecutions()\
  \ {\n    data_raw_query='{\"query\":\"{\\n  executions(limit: 5, filters: [{status:\
  \ {operator: EQUALS, values: [\\\"PAUSED\\\"]}}, {pipeline: {operator: EQUALS, values:\
  \ [\\\"'$1'\\\"]}}]) {\\n    pageInfo {\\n      limit\\n      offset\\n      total\\\
  n    }\\n    nodes {\\n      id\\n      application {\\n        id\\n        name\\\
  n      }\\n      ... on PipelineExecution {\\n        pipeline {\\n          id\\\
  n          name\\n        }\\n        memberExecutions {\\n          nodes {\\n\
  \            id\\n            ... on WorkflowExecution {\\n              workflow\
  \ {\\n                id\\n                name\\n              }\\n           \
  \   artifacts {\\n                id\\n                artifactSource {\\n     \
  \             id\\n                  name\\n                  artifacts(limit: 100)\
  \ {\\n                    nodes {\\n                      buildNo\\n           \
  \         }\\n                  }\\n                }\\n                buildNo\\\
  n              }\\n              outcomes {\\n                nodes {\\n       \
  \           ... on DeploymentOutcome {\\n                    environment {\\n  \
  \                    id\\n                      name\\n                    }\\n\
  \                    service {\\n                      id\\n                   \
  \   name\\n                    }\\n                  }\\n                }\\n  \
  \            }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\\
  n}\\n\",\"variables\":{}}'\n    data=$(curl --location --request POST \"$url\" -H\
  \ \"$content_header\" -H \"$auth_header\" --data-raw \"$data_raw_query\")\n\n  \
  \  all_pending_executions=$(echo $data | jq '[.data.executions.nodes[] | select(.memberExecutions.nodes[0].artifacts[0].buildNo<\"\
  '$current_pipeline_artifact_version'\") | {execution_id: .id, application_id: .application.id,\
  \ pipeline_id: .pipeline.id, service_id: .memberExecutions.nodes[0].outcomes.nodes[0].service.id,\
  \ environment_id: .memberExecutions.nodes[0].outcomes.nodes[0].environment.id, artifact_id:\
  \ .memberExecutions.nodes[0].artifacts[0].id, artifact_source_id: .memberExecutions.nodes[0].artifacts[0].artifactSource.id,\
  \ artifact_version: .memberExecutions.nodes[0].artifacts[0].buildNo, artifact_name:\
  \ .memberExecutions.nodes[0].artifacts[0].artifactSource.name, all_available_artifacts:\
  \ [.memberExecutions.nodes[0].artifacts[0].artifactSource.artifacts.nodes[].buildNo]}]')\n\
  \n    echo $all_pending_executions\n\n}\n\nfunction abortOlderApprovalPendingExecutions()\
  \ {\n    execution_ids_arr=($(echo $1 | jq -r '.[].execution_id'))\n \n    for exec_id\
  \ in \"${execution_ids_arr[@]}\"\n    do\n      data_raw_query='{\"query\":\"{\\\
  n  approvalDetails(applicationId: \\\"'$application_id'\\\", executionId: \\\"'$exec_id'\\\
  \") {\\n    approvalDetails {\\n      approvalId\\n      approvalType\\n      stepName\\\
  n      stageName\\n      startedAt\\n      triggeredBy {\\n        name\\n     \
  \   email\\n      }\\n      willExpireAt\\n      ... on UserGroupApprovalDetails\
  \ {\\n        approvers\\n        approvalId\\n        approvalType\\n        stepName\\\
  n        stageName\\n        startedAt\\n        executionId\\n        triggeredBy\
  \ {\\n          name\\n          email\\n        }\\n        willExpireAt\\n   \
  \     variables {\\n          name\\n          value\\n        }\\n      }\\n  \
  \    ... on ShellScriptDetails {\\n        approvalId\\n        approvalType\\n\
  \        retryInterval\\n        stageName\\n        stepName\\n        startedAt\\\
  n        triggeredBy {\\n          email\\n          name\\n        }\\n       \
  \ willExpireAt\\n      }\\n      ... on SNOWApprovalDetails {\\n        approvalCondition\\\
  n        approvalId\\n        approvalType\\n        currentStatus\\n        rejectionCondition\\\
  n        stageName\\n        startedAt\\n        stepName\\n        ticketType\\\
  n        ticketUrl\\n        triggeredBy {\\n          email\\n          name\\\
  n        }\\n        willExpireAt\\n      }\\n      ... on JiraApprovalDetails {\\\
  n        approvalCondition\\n        approvalId\\n        approvalType\\n      \
  \  currentStatus\\n        issueKey\\n        issueUrl\\n        rejectionCondition\\\
  n        stepName\\n        stageName\\n        startedAt\\n        triggeredBy\
  \ {\\n          email\\n          name\\n        }\\n        willExpireAt\\n   \
  \   }\\n    }\\n  }\\n}\",\"variables\":{}}'\n\n      #echo \"$data_raw_query\"\n\
  \      #echo \"Deployment URL: ${deploymentUrl}\"\n      #echo \"Application ID:\
  \ $application_id\"\n      data=$(curl --location --request POST \"$url\" -H \"\
  $content_header\" -H \"$auth_header\" --data-raw \"$data_raw_query\")\n\n      approval_id=$(echo\
  \ $data | jq -r '.data.approvalDetails.approvalDetails[].approvalId')\n\n      echo\
  \ \"Approval ID: $approval_id\"\n\n      deletion_mutation_query='{\"query\":\"\
  mutation {\\n approveOrRejectApprovals(input: {\\n  action: REJECT\\n  approvalId:\
  \ \\\"'$approval_id'\\\"\\n  applicationId: \\\"'$application_id'\\\"\\n  comments:\
  \ \\\"Testing\\\"\\n  executionId: \\\"'$exec_id'\\\"\\n  clientMutationId: \\\"\
  testing\\\"\\n  })\\n  {\\n  success\\n  clientMutationId\\n  }\\n}\",\"variables\"\
  :{}}'\n      deletion_mutation_exec=$(curl --location --request POST \"$url\" -H\
  \ \"$content_header\" -H \"$auth_header\" --data-raw \"$deletion_mutation_query\"\
  )\n\n      echo \"$deletion_mutation_exec\"\n\n    done\n\n}\n\nfunction main()\
  \ {\n    all_pending_executions=$(getOlderApprovalPendingExecutions $pipeline_id)\n\
  \    abortOlderApprovalPendingExecutions \"$all_pending_executions\"\n}\n\nmain"
scriptType: BASH
timeoutMillis: 600000
variables:
- name: input_pipeline_id
